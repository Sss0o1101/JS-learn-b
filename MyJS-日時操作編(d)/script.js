/* new Date() ------------------------------------------------------------------------------------------*/

  const d = new Date();
  console.log(d);
  console.log(d.toLocaleString); //スッキリ書ける

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 日時データから年や月、時間、分といった情報を取得する方法 ------------------------------------------------------------------------------------------*/

  const D = new Date();  //初期化
  console.log(D);
  console.log(D.toLocaleString()); //スッキリ書ける

  console.log(D.getFullYear());     //年
  console.log(D.getMonth());        //月 ・・・「実際の月-1」の数字が取得される
  console.log(D.getDate());         //日
  console.log(D.getHours());        //時
  console.log(D.getMinutes());      //分
  console.log(D.getSeconds());      //秒
  console.log(D.getMilliseconds()); //ミリ秒を0 ~ 999の数値で取得する
  console.log(D.getDay());          //曜日・・・「実際の曜日-1」の数字が取得される

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 指定した日時からデータを作る方法 ------------------------------------------------------------------------------------------*/

  //2000年4月11日のデータ
  const date = new Date(2000, 3, 11);
  console.log(date.toLocaleString);  // 2000/4/11 0:00:00

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 生成した日時データをあとから更新する方法 ------------------------------------------------------------------------------------------*/

  //2000年4月11日のデータ
  const Dates = new Date(2000, 3, 11);
  console.log(Dates.toLocaleString);  // 2000/4/11 0:00:00

  //2000年4月23日に更新
  Dates.setDate(23);  // 2000/4/23 0:00:00

  //この日付の100日後
  Dates.setDate(Dates.getDate() + 100);  // 2000/7/20 0:00:00

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 日時データをコピーする方法 ------------------------------------------------------------------------------------------*/

  //上記で作った、日時データを更新したが、元のデータはそのまま残しておきたい、という場合

  //2000年4月11日のデータ
  const q = new Date(2000, 3, 11);
  // const qBackup = q  //これは出来ない

  // const qBackup = new Date(2000, 3, 11);  //これはできる
  const qBackup = new Date(q.getFullYear(), q.getMonth(), q.getDate());  //これはできる

  //2000年4月23日に更新
  q.setDate(23);  // 2000/4/23 0:00:00
  console.log(q.toLocaleString);  // 2000/4/23 0:00:00
  console.log(q.qBackup.toLocaleString());  // 2000/4/11 0:00:00

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* getTime()の挙動 ------------------------------------------------------------------------------------------*/

  //2000年4月11日のデータ
  const t = new Date(2000, 3, 11);
  console.log(t.toLocaleString);  // 2000/4/11 0:00:00
  console.log(t.getTime());  // UTC, 1970/01/01 00:00:00 , Unix Timestamp

  const t2 = new Date(t.getTime() + 1000);  //new Date()には、「Unix Timestamp」 が渡せるので、t の 1000 ミリ秒後という意味で、d.getTime() に 1000 を足してみる。
  console.log(t2);

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 日時の差を計算するための方法 ------------------------------------------------------------------------------------------*/

  //ある日記が現在から何日前に投稿されたのかを表示

  //2023年6月10日に投稿されたとする
  //日時データに対して - の演算子を使うと、それぞれに getTime() を付けてくれるという仕様

  // new Date() - new Date(2023, 5, 10); //これもいい
  // const diff = new Date().getTime() - new Date(2023, 5, 10); //同じ意味
  const diff = Date.now() - new Date(2023, 5, 10);  //同じ意味
  const days = Math.floor(diff / 1000 / 60 / 60 / 24);

  console.log(diff); //1006226460  しかし、ミリ秒で書かれてもよくわからない。
  console.log(days);


/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 配列やpadStart()を用いて、日時データを好きな形式で出力する方法 ------------------------------------------------------------------------------------------*/

  const Months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  const Days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

  //2001年1月11日のデータ
  const n = new Date(2001, 0, 1);

  // January 01, Monday と表示           しかし、getMonth() や getDate() は、0 から始まる数値であって、こうした月や曜日の名前ではない。
  const Month =  Months[n.getMonth()];
  const nDate = n.getDate();
  const Day = Days[n.getDay()];

  console.log(`${Month} ${nDate} ${Day}`);

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/
