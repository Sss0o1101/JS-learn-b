/* タイマー機能を使ってみよう   ------------------------------------------------------------------------------------------*/

    //setInterval()・・・ 一定周期ごとに何らかの処理を繰り返し実行するもの  ・時計・スライドショー
    //setTimeout() ・・・ 一定時間後に一度だけ処理を実行してくれるもの     ・時間差メッセージ・リダイレクト

    setInterval(関数, 時間);
    setTimeout(関数, 時間);

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 一定時間ごとに処理を繰り返し実行してくれるsetInterval()の使い方  ------------------------------------------------------------------------------------------*/

    //現在時刻が表示されて、そこから 1 秒ごとに処理が繰り返される処理

    console.log(new Date());       //最初に表示しておきたい場合
    setInterval( () => {
        console.log(new Date());
    }, 1000);

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* setInterval()で起動したタイマーを止めるための方法  ------------------------------------------------------------------------------------------*/

    //clearInterval()・・・タイマーを止める

    //簡単なカウントダウンタイマー
    let count = 3;

    const intervalId = setInterval( () => {
        console.log(count);
        count--;                        //count -= 1;
        if (count < 0) {
            clearInterval(intervalId);  //ID はこちらの返り値として取得
        }
    }, 1000);

    console.log(`ID: ${intervalId}`);

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* setInterval()とその他の命令がどのような順序で実行されていくかを確認  ------------------------------------------------------------------------------------------*/

    //上記と同じ

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 一定時間後に指定した処理を実行することができるsetTimeout()の使い方  ------------------------------------------------------------------------------------------*/

    setTimeout( () => {
        // console.log('50% OFF!');
        window.location.href = 'https://256times.com';   //document.location.href = 'https://256times.com'; 同じく動作する
    }, 3000);

    console.log('Page loaded');

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* setTimeout()のなかでsetTimeout()を使うことで繰り返し実行される処理  ------------------------------------------------------------------------------------------*/

    //setTimeout() で 1 秒後に現在時刻を一度だけ表示

    // setTimeout( () => {
    //     console.log(new Date());
    // }, 1000);
    // setTimeout( () => {
    //     console.log(new Date());
    // }, 2000);

    setTimeout( () => {
        console.log(new Date());
        setTimeout( () => {
            console.log(new Date());
            setTimeout( () => {
                console.log(new Date());
            }, 1000);
        }, 1000);
    }, 1000);

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 再帰関数を用いて書き換え  ------------------------------------------------------------------------------------------*/

    //再帰関数・・・関数の中からその関数自身を実行するというもの

    function showClock() {
         setTimeout( () => {
             console.log(new Date());
             showClock();
            }, 1000);
    }

    showClock()

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* setInterval()とsetTimeout()がどのように実行されていくかを確認  ------------------------------------------------------------------------------------------*/

    //setTimeout() の場合、処理時間が長くなったとしても単に後ろにずれていくだけなので、処理が重なってブラウザに負荷がかかるということがありません

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/

/* 現在日時をページに表示するように変更し、タイマーを止めるためのボタンを設置
   ボタンをクリックしたらタイマーを止めるためにclearTimeout()を使っていきます。 ------------------------------------------------------------------------------------------*/

    const pElement = document.querySelector('p');
    const btnElement = document.querySelector('button');
    // let timeoutId;

    function showClock() {
        let timeoutId = setTimeout( () => {
             pElement.textContent = new Date();
             showClock();
            }, 1000);
    }

    btnElement.addEventListener('click', () => {
        clearTimeout(timeoutId);
    });

    showClock();

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/
/* AIの書き方 ----------------------------------------------------------------------------------------------------------------------------------------------*/

    let intervalID; // タイマーIDを保存する変数を追加

    function showClock() {
         intervalId = setTimeout( () => { // setTimeoutのIDを保存
             pElement.textContent = new Date();
             showClock();
            }, 1000);
    }

    btnElement.addEventListener('click', () => {
        clearTimeout(intervalID); // ボタンがクリックされたときにタイマーを停止
        pElement.textContent = 'タイマーが停止しました'; // 停止メッセージを表示
    });

    showClock();

/* ----------------------------------------------------------------------------------------------------------------------------------------------*/


